import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class TaskManager {
    private JFrame frame;
    private DefaultListModel<String> taskListModel;
    private JList<String> taskList;
    private JTextField taskField;
    private JButton addButton, deleteButton, completeButton, editButton;

    public TaskManager() {
        // Create frame
        frame = new JFrame("Task Manager");
        frame.setSize(400, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.getContentPane().setBackground(new Color(240, 240, 240));

        // Task list model
        taskListModel = new DefaultListModel<>();
        taskList = new JList<>(taskListModel);
        taskList.setFont(new Font("Arial", Font.PLAIN, 16));
        taskList.setSelectionBackground(new Color(173, 216, 230));
        JScrollPane scrollPane = new JScrollPane(taskList);

        // Input field panel
        JPanel inputPanel = new JPanel(new BorderLayout(5, 5));
        taskField = new JTextField();
        taskField.setFont(new Font("Arial", Font.PLAIN, 14));
        addButton = new JButton("➕ Add");
        styleButton(addButton, new Color(0, 150, 136));

        inputPanel.add(taskField, BorderLayout.CENTER);
        inputPanel.add(addButton, BorderLayout.EAST);
        inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Button panel
        JPanel buttonPanel = new JPanel(new GridLayout(1, 3, 5, 5));  // Changed to 3 buttons
        deleteButton = new JButton("🗑 Delete");
        completeButton = new JButton("✔ Done");
        editButton = new JButton("✏ Edit");  // New button for editing tasks

        styleButton(deleteButton, new Color(211, 47, 47));
        styleButton(completeButton, new Color(76, 175, 80));
        styleButton(editButton, new Color(255, 165, 0));  // Styling the edit button

        buttonPanel.add(deleteButton);
        buttonPanel.add(completeButton);
        buttonPanel.add(editButton);  // Added edit button to the panel
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Add components to frame
        frame.add(inputPanel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Add button functionality
        addButton.addActionListener(e -> addTask());
        deleteButton.addActionListener(e -> deleteTask());
        completeButton.addActionListener(e -> markTaskAsCompleted());
        editButton.addActionListener(e -> editTask());  // Add listener for editing task

        // Add Enter key listener to taskField
        taskField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    addTask();  // Add task when Enter is pressed
                }
            }
        });

        frame.setVisible(true);
    }

    // Style buttons for a modern UI
    private void styleButton(JButton button, Color color) {
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setForeground(Color.WHITE);
        button.setBackground(color);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setOpaque(true);
    }

    // Method to add task
    private void addTask() {
        String task = taskField.getText().trim();
        if (!task.isEmpty()) {
            taskListModel.addElement(task);
            taskField.setText("");
        } else {
            JOptionPane.showMessageDialog(frame, "Task cannot be empty!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Method to delete selected task
    private void deleteTask() {
        int selectedIndex = taskList.getSelectedIndex();
        if (selectedIndex != -1) {
            taskListModel.remove(selectedIndex);
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a task to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Method to mark a task as completed
    private void markTaskAsCompleted() {
        int selectedIndex = taskList.getSelectedIndex();
        if (selectedIndex != -1) {
            String task = taskListModel.getElementAt(selectedIndex);
            if (!task.startsWith("✔ ")) {
                taskListModel.set(selectedIndex, "✔ " + task);
            }
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a task to mark as done.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Method to edit the selected task
    private void editTask() {
        int selectedIndex = taskList.getSelectedIndex();
        if (selectedIndex != -1) {
            String currentTask = taskListModel.getElementAt(selectedIndex);
            String editedTask = JOptionPane.showInputDialog(frame, "Edit Task:", currentTask);
            if (editedTask != null && !editedTask.trim().isEmpty()) {
                taskListModel.set(selectedIndex, editedTask);
            }
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a task to edit.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Main method
    public static void main(String[] args) {
        SwingUtilities.invokeLater(TaskManager::new);  // Changed class name here
    }
}
